{"name": "test_delayed_response", "status": "broken", "statusDetails": {"message": "simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <test_requests.TestGetRequests object at 0x7f784c0b4190>\n\n    def test_delayed_response(self):\n        get_req = requests.get('https://reqres.in/api/users?delay=3')\n>       get_req_json = get_req.json()\n\ntest_requests.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib/python3/dist-packages/requests/models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\n/usr/lib/python3/dist-packages/simplejson/__init__.py:525: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3/dist-packages/simplejson/decoder.py:370: in decode\n    obj, end = self.raw_decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simplejson.decoder.JSONDecoder object at 0x7f784c1e2f40>\ns = '<!DOCTYPE html>\\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en-US\"> <![endif]-->\\n<!--[if IE 7]>    <html ...lank\">Cloudflare</a></span>\\n    \\n  </p>\\n</div><!-- /.error-footer -->\\n\\n\\n    </div>\\n</div>\\n</body>\\n</html>\\n\\n'\nidx = 0, _w = <built-in method match of re.Pattern object at 0x7f784d43eab0>, _PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3/dist-packages/simplejson/decoder.py:400: JSONDecodeError"}, "start": 1612049399634, "stop": 1612049430817, "uuid": "c970f174-b708-45f3-aa0b-12dc0f7350e9", "historyId": "0bcad2eb98bf276efb6244899f01b451", "testCaseId": "83d482cc36cd1dcbb655307db86a7b45", "fullName": "api_testing.homework3.test_requests.TestGetRequests#test_delayed_response", "labels": [{"name": "parentSuite", "value": "api_testing.homework3"}, {"name": "suite", "value": "test_requests"}, {"name": "subSuite", "value": "TestGetRequests"}, {"name": "host", "value": "kali"}, {"name": "thread", "value": "2948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "api_testing.homework3.test_requests"}]}